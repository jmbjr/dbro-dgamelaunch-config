DorfServer 1.0
Detailed instructions on setting up your own server at:
https://github.com/jmbjr/dbro-dgamelaunch-config/wiki/Setting-up-dgamelaunch-for-dorfserver

NOTE: I hacked this together pretty crudely. It works but I had to continually wrestle with stupid typos in the dgamelaunch config files along with multiple file system permission issues.

Definitely use at your own risk. 

Basically, this is a ssh/console based dwarf fortress server that allows folks to log in, fire up a game and play via ssh and let their friends watch.
There's an IRC bot that spins up for each player that will announce some interesting milestones based on the gamelog.


This is HEAVILY based on dgamelaunch-powered Dungeon Crawl Stone Soup setup.  
The main difference is the addition of the dfdir and the lack of using dgl to properly manage and install new DF versions. This could be added.

Things to be aware of:
The dwizzell bot needs some serious work. It parrots gamelog events to an IRC channel (similar to the crawl bots which it is heavily based on).
The issue is, the DF gamelog isn't really formatted for use in milestone announcement. 
A better solution (I think) would be to parse the gamelog into a more sane format. Maybe you could hack soundsense to write a nicely formatted line to a common gamelog file (rather than playing a sound).
Then you could replace all the individual dwizzell bots with a single annoucement bot (similar to how crawl does it).

DF is a CPU hog. World Gen pegged my VPS pretty bad so I added a way for the server admin to upload worlds to a templates folder that get copied to new player folders. This way the server admin can encourage players to not kill the server and just use a pregenerated world. 
I didn't know how to disable world gen.

Dgamelaunch uses TTYRECs to allow watching of the games. For crawl, it looks for certain codes in the TTYREC to know at which point to start letting the watchers watch. Thing is, these aren't the same codes for DF so when you start watching a DF game, you start watching from the beginning. 
This is interesting but there's probably a much better solution.

I wanted to add a way to allow players to edit their init files. This wouldn't be difficult with ee and virus (which come along with the dgamelaunch setup). I just never prioritized it.
The install scripts try to set the basic init options, like TEXT mode and setting the window size and turning off sound. But it could be useful (potentially) for players who know what they are doing to have edit access.

There's very little error trapping so when things break, they break. 
Common Issues:
Can't create a new account:  check your dgamelaunch.db permissions
Can't launch a game (selecting a version to play results in nothing happening): this is likely a permissions issue in dfdir or dgldir
The lobby crashes or is unresponsive (similar to above): check dbro-dgamelaunch-config/dgamelaunch-dorf.conf for typos and syntax errors
The game launches but the font looks messed up (missing characters, uneven spacing, etc): ensure you are using UTF-8 in your ssh client.


You can contact me for questions at johnstein@berotato.org but it's faster to reach me on IRC (irc.lunarnet.org, channel #mefightclub or #mfc-df)

Feel free to expand or improve on this. I'd love to see this go somewhere. Some friends and I are working on a non-dgamelaunch setup that will hopefully be a TON easier to set up and maintain.



NOTES BELOW HERE ARE FOR THE ORIGINAL DGAMELAUNCH FOR CRAWL SERVERS
dgamelaunch-dev.config
------------------

This is a collection of scripts to manage a dgamelaunch
(http://nethackwiki.com/wiki/Dgamelaunch) install, all run from an
umbrella `dgl` script.

These are still very incomplete, WIP.

Currently available commands:

1. Update your dgamelaunch-dev.config from the repository:
   $ sudo dgl publish --confirm

2. Change a dgl user's password:
   $ sudo dgl passwd johndoe

3. Update Crawl alpha build from git master:
   $ dgl update-trunk

4. Remove stale Crawl alpha versions:
   $ dgl remove-trunks

5. Run dgl-whereis inotify daemon:
   $ sudo dgl crawl-inotify-dglwhere

   This inotify daemon monitors the dgamelaunch in-progress dirs to keep
   track of active players, and monitors their morgue directories for
   changes to their .where files. When a .where changes, the daemon reads
   it and writes a human-readable .dglwhere file in the same directory.

   You may configure dgamelaunch to show this .dglwhere information
   using the dgamelaunch extra_info_file option.

   You may also run the crawl-inotify-dglwhere script standalone (without
   the rest of the dgamelaunch-dev.config setup) by starting it as:

      sudo -u dgl perl crawl-inotify-dglwhere.pl <dgldir> <morguedir>

Note: Some of these commands will probably change names soon.

The ultimate goal for this project is to become a one-stop shop for
all your dgamelaunch+Crawl needs, starting from installing dgamelaunch
itself

TODO
----

1. `dgl install-dgl` command to fetch and install the latest dgamelaunch.

2. `dgl create-chroot` command to set up a basic chroot jail with all the
   fixtures dgamelaunch wants (dgamelaunch already has a skeleton script
   that can serve as a basis, although this is unfortunately NetHack-biased).
   
3. Support for installing different games, including fetching their sources
   from their respective source repositories, compiling, installing into the
   chroot, etc.
       `dgl install crawl master`,
       `dgl install nethack 3.4.3` etc.)

   Installing a game should also (eventually) add a suitable entry to
   the various menu files and update the dgamelaunch-dev.config
   appropriately.

4. Support for tracking development versions of games (such as Crawl
   master) using a system similar to CDO's for creating versioned
   directories, migrating saves to newer versions, and deleting old
   versions with no remaining save games.

5. Module system so that management of say, crawl-git is a
   self-contained module. Each module should be able to contribute dgl
   commands and provide files that will be installed to the chroot or
   root filesystem.

6. Each dgl command that affects the machine or chroot should update a
   manifest. The manifest could be a file or a directory containing
   multiple manifest files.

   Given a manifest, I should be able to install dgamelaunch-dev.config
   on a brand new machine and use one dgl command to recreate the manifest.

   For instance, something like:
   `dgl replicate-manifest <path-to-manifest>`

   The manifest should include information like this:
   * What dgamelaunch version is installed, and from where (install-dgl module)
   * chroot configuration: what binaries and libraries have been installed
     into the chroot, with the exception of game binaries, i.e. the state of
     the chroot minus games (chroot module)
   * Game configuration (handled by the various game modules)
